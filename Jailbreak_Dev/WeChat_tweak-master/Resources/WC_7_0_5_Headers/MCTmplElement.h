//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "MCTriggerElement.h"

#import "AVAudioPlayerDelegate.h"
#import "MCTmplUIProtocol.h"

@class AVAudioPlayer, CPParticleEmitter, GPUImageFramebuffer, LKParticleEmitter, MCAudioDetect, NSArray, NSString, NSTimer;

@interface MCTmplElement : MCTriggerElement <AVAudioPlayerDelegate, MCTmplUIProtocol>
{
    float *pPosVertex;
    float *pTexCoord;
    struct MeterTable meterTable;
    float audioPowerScale;
    float lastAudioPowerScale;
    _Bool _enableLazyLoad;
    _Bool _enable3D;
    _Bool _pauseFlag;
    _Bool _audioChangeParticleColor;
    _Bool _hasFFT;
    int _type;
    int _frameType;
    int _stickerAlphaType;
    int _stickerType;
    int _stickerFilterChooseType;
    int _scaleDirection;
    float _audioPowerInput;
    float _audioPowerScaleDcoefficient;
    int _fftlength;
    NSString *_itemName;
    NSString *_elementID;
    NSString *_elementName;
    double _frameDuration;
    long long _frames;
    long long _zIndex;
    NSArray *_alignFacePoints;
    NSArray *_scalePivots;
    double _scaleWidthFactor;
    double _originScaleFactor;
    NSString *_audioName;
    long long _audioLoopCount;
    long long _blendMode;
    long long _orderMode;
    id <MCStickerProviderProtocol> _stickerProvider;
    LKParticleEmitter *_particleEmitter;
    double _particleWordUpdateInterval;
    MCTmplElement *_realTexElement;
    double _angle;
    double _scale;
    double _dx;
    double _dy;
    NSString *_folderPath;
    AVAudioPlayer *_audioPlayer;
    long long _audioPlayedTimes;
    NSTimer *_audioTimer;
    NSArray *_wmGroup;
    struct {
        float min;
        float max;
    } _audioValueRange;
    NSArray *_audioScaleFactor;
    NSArray *_audioAngleFactor;
    NSArray *_audioDxFactor;
    NSArray *_audioDyFactor;
    MCAudioDetect *_audioDetect;
    float *_fftvalues;
    NSString *_dexName;
    CPParticleEmitter *_cpParticleEmitter;
    long long _currentFrameIndex;
    GPUImageFramebuffer *_lastFramebuffer;
    long long _lastFrameIndex;
    double _lastFrameTime;
    struct CGSize _frameSize;
    struct CGSize _textureSize;
    struct CGPoint _texturePosition;
    struct CGPoint _textureAnchor;
    struct CGSize _renderScale;
    struct CGPoint _scaleAnchorPoint;
    struct CGPoint _anchorPointAudio;
    struct CGRect _relativeAnchorRect;
    struct CGRect _relativeScaleRect;
}

+ (id)defaultTipForTriggerType:(int)arg1;
+ (double)scaleWidthFactorFromFacePoints:(float (*)[2])arg1 scalePivots:(id)arg2;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)advanceTime:(double)arg1;
@property(retain, nonatomic) NSArray *alignFacePoints; // @synthesize alignFacePoints=_alignFacePoints;
@property(nonatomic) struct CGPoint anchorPointAudio; // @synthesize anchorPointAudio=_anchorPointAudio;
@property(nonatomic) double angle; // @synthesize angle=_angle;
@property(retain, nonatomic) NSArray *audioAngleFactor; // @synthesize audioAngleFactor=_audioAngleFactor;
@property(nonatomic) _Bool audioChangeParticleColor; // @synthesize audioChangeParticleColor=_audioChangeParticleColor;
@property(retain, nonatomic) MCAudioDetect *audioDetect; // @synthesize audioDetect=_audioDetect;
@property(retain, nonatomic) NSArray *audioDxFactor; // @synthesize audioDxFactor=_audioDxFactor;
@property(retain, nonatomic) NSArray *audioDyFactor; // @synthesize audioDyFactor=_audioDyFactor;
@property(nonatomic) long long audioLoopCount; // @synthesize audioLoopCount=_audioLoopCount;
@property(copy, nonatomic) NSString *audioName; // @synthesize audioName=_audioName;
@property long long audioPlayedTimes; // @synthesize audioPlayedTimes=_audioPlayedTimes;
@property(retain) AVAudioPlayer *audioPlayer; // @synthesize audioPlayer=_audioPlayer;
- (void)audioPlayerDidFinishPlaying:(id)arg1 successfully:(_Bool)arg2;
- (float)audioPower;
@property(nonatomic) float audioPowerInput; // @synthesize audioPowerInput=_audioPowerInput;
@property(nonatomic) float audioPowerScaleDcoefficient; // @synthesize audioPowerScaleDcoefficient=_audioPowerScaleDcoefficient;
@property(retain, nonatomic) NSArray *audioScaleFactor; // @synthesize audioScaleFactor=_audioScaleFactor;
@property(retain) NSTimer *audioTimer; // @synthesize audioTimer=_audioTimer;
@property(nonatomic) CDStruct_b2fbf00d audioValueRange; // @synthesize audioValueRange=_audioValueRange;
@property(nonatomic) long long blendMode; // @synthesize blendMode=_blendMode;
- (_Bool)checkAudioTriggerState;
- (_Bool)checkAudioTriggerStateWithPower:(float)arg1;
- (void)clearResource;
- (double)computeScaleFactor2OffsetScaleFactor;
@property(retain, nonatomic) CPParticleEmitter *cpParticleEmitter; // @synthesize cpParticleEmitter=_cpParticleEmitter;
@property(nonatomic) long long currentFrameIndex; // @synthesize currentFrameIndex=_currentFrameIndex;
- (id)currentTexture;
- (id)currentTexture:(id)arg1;
- (id)currentTextureAtIndex:(long long)arg1 frameTime:(double)arg2;
- (id)currentTextureWithNumber:(long long)arg1;
- (void)dealloc;
@property(copy, nonatomic) NSString *dexName; // @synthesize dexName=_dexName;
@property(nonatomic) double dx; // @synthesize dx=_dx;
@property(nonatomic) double dy; // @synthesize dy=_dy;
@property(copy, nonatomic) NSString *elementID; // @synthesize elementID=_elementID;
@property(copy, nonatomic) NSString *elementName; // @synthesize elementName=_elementName;
@property(nonatomic) _Bool enable3D; // @synthesize enable3D=_enable3D;
@property(nonatomic) _Bool enableLazyLoad; // @synthesize enableLazyLoad=_enableLazyLoad;
@property(nonatomic) int fftlength; // @synthesize fftlength=_fftlength;
@property(nonatomic) float *fftvalues; // @synthesize fftvalues=_fftvalues;
@property(copy, nonatomic) NSString *folderPath; // @synthesize folderPath=_folderPath;
@property(nonatomic) double frameDuration; // @synthesize frameDuration=_frameDuration;
@property(nonatomic) struct CGSize frameSize; // @synthesize frameSize=_frameSize;
@property(nonatomic) int frameType; // @synthesize frameType=_frameType;
@property(nonatomic) long long frames; // @synthesize frames=_frames;
- (float)getTmplAudioDbScale:(float)arg1;
- (id)getTmplUIElemment:(float)arg1;
@property(nonatomic) _Bool hasFFT; // @synthesize hasFFT=_hasFFT;
- (id)init;
- (id)initWithDictionary:(id)arg1 item:(id)arg2;
- (id)initWithDictionary:(id)arg1 item:(id)arg2 provider:(id)arg3;
@property(copy, nonatomic) NSString *itemName; // @synthesize itemName=_itemName;
@property(nonatomic) long long lastFrameIndex; // @synthesize lastFrameIndex=_lastFrameIndex;
@property(nonatomic) double lastFrameTime; // @synthesize lastFrameTime=_lastFrameTime;
@property(retain, nonatomic) GPUImageFramebuffer *lastFramebuffer; // @synthesize lastFramebuffer=_lastFramebuffer;
@property(nonatomic) long long orderMode; // @synthesize orderMode=_orderMode;
@property(nonatomic) double originScaleFactor; // @synthesize originScaleFactor=_originScaleFactor;
@property(retain, nonatomic) LKParticleEmitter *particleEmitter; // @synthesize particleEmitter=_particleEmitter;
@property(nonatomic) double particleWordUpdateInterval; // @synthesize particleWordUpdateInterval=_particleWordUpdateInterval;
- (void)pauseAudio;
- (void)pauseAudio:(_Bool)arg1;
- (void)pauseAudioDelayed;
@property _Bool pauseFlag; // @synthesize pauseFlag=_pauseFlag;
- (void)playAudio;
- (float *)positionVertex;
- (float *)positionVertex:(float (*)[2])arg1 withImageSize:(struct CGSize)arg2;
- (float *)positionVertex:(float (*)[2])arg1 withImageSize:(struct CGSize)arg2 withScale:(float)arg3;
- (float *)positionVertexWithScale:(float)arg1;
- (void)preloadResource;
@property(nonatomic) __weak MCTmplElement *realTexElement; // @synthesize realTexElement=_realTexElement;
@property(nonatomic) struct CGRect relativeAnchorRect; // @synthesize relativeAnchorRect=_relativeAnchorRect;
@property(nonatomic) struct CGRect relativeScaleRect; // @synthesize relativeScaleRect=_relativeScaleRect;
@property(nonatomic) struct CGSize renderScale; // @synthesize renderScale=_renderScale;
- (void)resetTime;
@property(nonatomic) double scale; // @synthesize scale=_scale;
@property(nonatomic) struct CGPoint scaleAnchorPoint; // @synthesize scaleAnchorPoint=_scaleAnchorPoint;
@property(nonatomic) int scaleDirection; // @synthesize scaleDirection=_scaleDirection;
@property(retain, nonatomic) NSArray *scalePivots; // @synthesize scalePivots=_scalePivots;
@property(nonatomic) double scaleWidthFactor; // @synthesize scaleWidthFactor=_scaleWidthFactor;
@property(nonatomic) int stickerAlphaType; // @synthesize stickerAlphaType=_stickerAlphaType;
@property(nonatomic) int stickerFilterChooseType; // @synthesize stickerFilterChooseType=_stickerFilterChooseType;
@property(retain, nonatomic) id <MCStickerProviderProtocol> stickerProvider; // @synthesize stickerProvider=_stickerProvider;
@property(nonatomic) int stickerType; // @synthesize stickerType=_stickerType;
@property(nonatomic) struct CGPoint textureAnchor; // @synthesize textureAnchor=_textureAnchor;
@property(nonatomic) struct CGPoint texturePosition; // @synthesize texturePosition=_texturePosition;
@property(nonatomic) struct CGSize textureSize; // @synthesize textureSize=_textureSize;
@property(nonatomic) int type; // @synthesize type=_type;
@property(retain, nonatomic) NSArray *wmGroup; // @synthesize wmGroup=_wmGroup;
@property(nonatomic) long long zIndex; // @synthesize zIndex=_zIndex;
- (void)stopAudio;
- (struct CGPoint)textureAnchorPosition:(float (*)[2])arg1 withImageSize:(struct CGSize)arg2;
- (struct CGPoint)textureAnchorPosition:(float (*)[2])arg1 withImageSize:(struct CGSize)arg2 scale:(float)arg3;
- (struct CGPoint)textureAnchorWithRect:(struct CGRect)arg1 withImageSize:(struct CGSize)arg2;
- (float *)textureCoordinate;
- (double)textureRotate:(float (*)[2])arg1 withImageSize:(struct CGSize)arg2;
- (double)textureRotateBody:(float (*)[2])arg1 withImageSize:(struct CGSize)arg2;
- (double)textureScale:(float (*)[2])arg1 withImageSize:(struct CGSize)arg2;
- (double)textureScaleWithRect:(struct CGRect)arg1 withImageSize:(struct CGSize)arg2;
@property(readonly, nonatomic) _Bool texturesLoadFinished;
@property(readonly, nonatomic) unsigned long long texturesMemCost;
- (float)updateAudioPower;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

