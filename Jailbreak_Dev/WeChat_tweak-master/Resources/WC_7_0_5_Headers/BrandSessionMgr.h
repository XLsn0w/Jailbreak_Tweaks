//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "MMService.h"

#import "IContactMgrExt.h"
#import "IMMNewSessionMgrExt.h"
#import "IMMNewSessionMgrFilterExt.h"
#import "IMsgExt.h"
#import "ISessionInfoExt.h"
#import "ISessionStorageDelegate.h"
#import "MMService.h"
#import "MMSessionRefreshExt.h"
#import "WXGImportMessageNotification.h"

@class BrandSessionCache, MMBaseSessionStorage, NSData, NSMutableArray, NSMutableDictionary, NSString;

@interface BrandSessionMgr : MMService <ISessionStorageDelegate, WXGImportMessageNotification, ISessionInfoExt, MMSessionRefreshExt, MMService, IMsgExt, IContactMgrExt, IMMNewSessionMgrExt, IMMNewSessionMgrFilterExt>
{
    BrandSessionCache *m_sessionCache;
    _Bool m_isUpgradeFromOldVersion;
    MMBaseSessionStorage *m_sessionStorage;
    NSMutableDictionary *m_dictCellData;
    NSData *m_oldSessionCacheData;
    NSMutableArray *m_dicMsgListArray;
    NSMutableArray *m_setUsrNameArray;
}

- (void).cxx_destruct;
- (void)OnAddMsgListForSession:(id)arg1 NotifyUsrName:(id)arg2;
- (void)OnDelMsg:(id)arg1;
- (void)OnModMsg:(id)arg1 MsgWrap:(id)arg2;
- (void)OnUnReadCountChange:(id)arg1;
- (void)addBrandSessionHolderToSessionList;
- (void)addSession:(id)arg1;
- (void)cleanUpNoMsgSessions:(id)arg1;
- (void)clearNewArrivalCount;
- (void)clearReadCountForBrand:(id)arg1;
- (void)clearReadCountForBrandSet:(id)arg1;
- (void)clearSessionCacheNewArrival;
- (void)clearSessionCacheNewArrivalWhenPopBrandName:(id)arg1;
- (long long)compareSession:(id)arg1 rightSession:(id)arg2;
- (void)dealloc;
- (void)deleteAllSessions;
- (void)deleteOldVersionSessionCache;
- (void)deleteSessionOfSession:(id)arg1 withDeleteContact:(_Bool)arg2 withDeleteMsg:(_Bool)arg3;
- (void)deleteSessionOfUserName:(id)arg1 withDeleteContact:(_Bool)arg2 withDeleteMsg:(_Bool)arg3;
- (id)genMainFrameSessionInfo;
- (unsigned int)genSendMsgTime;
- (id)getAllUserNamesOnSessionStorgae;
- (id)getLastUserNameOnSessionStorage;
- (unsigned int)getNewArrivalCount;
- (_Bool)hasNewArrival;
- (id)importSessions;
- (id)init;
- (void)innerNotifyDeletedAllSession;
- (unsigned int)innerUpdateSessionForUser:(id)arg1;
- (_Bool)isContactNeedProcess:(id)arg1;
- (_Bool)isMessageShouldHandled:(id)arg1;
- (_Bool)isSessionCacheValid;
- (id)isUserHasSpecalSessionInfo:(id)arg1;
- (_Bool)isUserShouldHandled:(id)arg1;
- (id)lastMessageFromSessionCache;
@property(retain, nonatomic) BrandSessionCache *m_sessionCache; // @synthesize m_sessionCache;
- (void)onContactListUpdate:(unsigned int)arg1;
- (void)onDeleteContact:(id)arg1;
- (void)onDeleteSessionOfUser:(id)arg1;
- (void)onGetDraft:(id)arg1 draft:(id)arg2;
- (void)onImportMessageSuccess;
- (void)onModifyContact:(id)arg1;
- (void)onModifyDraft:(id)arg1 draft:(id)arg2 draftTime:(unsigned int)arg3;
- (void)onRebuildSessionStorage;
- (_Bool)onServiceMemoryWarning;
- (void)onSessionUpgrade;
- (void)p_onAddMsgListArray:(id)arg1 notifyUserNameArray:(id)arg2;
- (id)pathForNewCache;
- (id)pathForSessionCache;
- (void)rebuildSessionCacheFromDB;
- (void)rebuildSessionStorage;
- (void)recordLastBrandMsgSvrIDWhenEnterBrandSessionHolder;
- (void)recordLastBrandMsgSvrIDWhenExitSessionWithBrand:(id)arg1;
- (void)refreshServiceTriggerToRefresh:(id)arg1;
- (void)saveSessionCache;
- (id)sessionCellDataAtIndex:(long long)arg1;
- (unsigned int)sessionCount;
- (id)sessionInfoAtIndex:(long long)arg1;
- (id)sessionInfoWithUsrName:(id)arg1;
- (void)topSessionOfUser:(id)arg1;
- (void)tryInvalidateSessionCacheForUser:(id)arg1;
- (void)tryLoadSessionCache;
- (void)untopSessionOfUser:(id)arg1;
- (unsigned int)updateOrAddSessionForUser:(id)arg1 AllowAdd:(_Bool)arg2;
- (void)updateSession;
- (void)updateSessionCacheOnReadCountChangeWithMsgWrap:(id)arg1;
- (void)updateSessionCacheWithMsgWrap:(id)arg1 hasNewArrival:(_Bool)arg2;
- (void)updateSessionCellData:(id)arg1;
- (void)updateSessionOfUser:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

